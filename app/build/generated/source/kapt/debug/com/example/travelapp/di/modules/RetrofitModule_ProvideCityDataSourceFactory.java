// Generated by Dagger (https://dagger.dev).
package com.example.travelapp.di.modules;

import com.example.common.data.data_sources.CityDataSource;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RetrofitModule_ProvideCityDataSourceFactory implements Factory<CityDataSource> {
  private final RetrofitModule module;

  private final Provider<Retrofit> retrofitProvider;

  public RetrofitModule_ProvideCityDataSourceFactory(RetrofitModule module,
      Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public CityDataSource get() {
    return provideCityDataSource(module, retrofitProvider.get());
  }

  public static RetrofitModule_ProvideCityDataSourceFactory create(RetrofitModule module,
      Provider<Retrofit> retrofitProvider) {
    return new RetrofitModule_ProvideCityDataSourceFactory(module, retrofitProvider);
  }

  public static CityDataSource provideCityDataSource(RetrofitModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNullFromProvides(instance.provideCityDataSource(retrofit));
  }
}
